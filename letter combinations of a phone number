class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty()) return {}; // Handle empty input

        vector<string> res;
        string curr;
        dfs(digits, 0, curr, res);
        return res;   
    }

private:
    vector<string> digitsToLetters = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

    void dfs(string& digits, int index, string& curr, vector<string>& res) {
        if(index == digits.size()) {  // When we reach full length
            res.push_back(curr);
            return;  // Stop further recursion
        }

        for(char letter : digitsToLetters[digits[index] - '0']) {
            curr.push_back(letter);
            dfs(digits, index + 1, curr, res);
            curr.pop_back(); // Backtracking step
        }
    }
};
